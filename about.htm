<!DOCTYPE html>
<head>
	<meta charset="utf-8" />
	
	<!-- Mobile Specific Metas
  ================================================== -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	
	<title>Chicago Boss: About The Project</title>
	<link rel="stylesheet" href="includes/css/main.css">
	
	<script src="includes/js/jquery-1.8.2.min.js"></script>
	<script src="includes/js/main.js"></script>

	<!-- IE Fix for HTML5 Tags -->
	<!--[if lt IE 9]>
		<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->

</head>
<body>
	<article>
		<header>
			<hgroup id="nav-global-container">
				<aside id="logo">
					<a href="index.htm">
						<svg id="logo-large" height="99" width="252" xmlns="http://google.com" xmlns:xlink="http://www.w3.org/1999/xlink" >
						  <image x="" y="" height="99" width="252"  xlink:href="images/logo.svg" />
						</svg>
						<svg id="logo-small" height="79" width="232" xmlns="http://google.com" xmlns:xlink="http://www.w3.org/1999/xlink" >
						  <image x="" y="" height="79" width="232"  xlink:href="images/logo.svg" />
						</svg>
					</a>
				</aside>
				<nav id="nav-global">
                <a href="/api.html">API</a><a href="https://github.com/evanmiller/ChicagoBoss/wiki">Wiki</a><a href="https://github.com/evanmiller/ChicagoBoss/wiki/Quickstart">Quick Start</a><a href="/ChicagoBoss-0.8.5.tar.gz" class="download">Download v 0.8.5 <span>&#128229;</span></a><a href="about.htm" class="active">About</a>
				</nav>
			</hgroup>
		</header>
		<section class="container">
			
			<div class="sixteen columns">
				<div id="content-container" class="padding-twenty">
					<div class="row clearfix">
						<div class="ten columns alpha">
							<h2>About</h2>
                            <p><strong>We love Rails</strong>, but we believe that Ruby is the wrong choice of platform on which to build a simple, fast, reliable website. The alternatives aren't much better: the JVM, V8, Python, and Perl all eventually run into the problem of <strong>dog-slow server-side templates</strong>.</p>

                            <p>Web developers usually "solve" the problem in a number of ways: buying lots of hardware, hiring a big ops team, implementing complex nested hierarchical cache structures, ripping out features, and moving to a "thick-client" architecture that takes forever to load. But there's a much simpler solution: it's called <strong>respecting the RAM</strong>.</p>

                            <h3>Erlang Respects Your RAM!</h3>

                            <p>Erlang is different from other platforms because when rendering a server-side template, it doesn't create a separate copy of a web page in memory for each connected client. Instead, it constructs <strong>pointers to the same pieces of immutable memory</strong> across multiple requests.</p>
                            
                            <p>So if two people request two different profile pages at the same time, they're actually sent the same chunks of memory for the header, footer, and other shared template snippets. The result is a server that can construct complex, <strong>uncached</strong> web pages for hundreds of users per second without breaking a sweat.</p>

                            <p>With Erlang, you can run a website on a <strong>fraction of the hardware</strong> that Ruby and the JVM require, saving you money and operational headaches. You can run a website on "wimpy-core" ARM servers, helping your bottom-line along with the environment. Your test suite will run much faster than you thought possible, shortening your development cycle and letting you deliver features more quickly.</p>

                            <h3>Chicago Boss Makes Erlang Accessible</h3>

                            <p>Erlang has a reputation for being a mystical technology available only to an elite few willing to spend years learning its arcane syntax. It's true that Erlang "looks weird" to developers accustomed to C-like syntax, and the semantics of functional programming takes some getting used to. By <strong>adopting familiar Rails conventions</strong>, Chicago Boss has finally made Erlang accessible to programmers who don't have years and years of free time.</p>

                            <p>Let's look at a few examples.</p>

                            <h4>Defining an action</h4>

                            <p>Ruby on Rails:
<pre><code>def index
    case @request.method
    when "POST"
        # do something...
    when "GET"
        # do something...
    end
end</code></pre>
                            </p>

                            <p>Chicago Boss:
<pre><code>index('POST', []) -&gt;
    # do something...
index('GET', []) -&gt;
    # do something...</code></pre>
                            </p>

                            <h4>Creating a record</h4>

                            <p>Ruby on Rails:
<pre><code>@person = Person.new(:name =&gt; "Joe", :age =&gt; 4)</code></pre>
                            </p>

                            <p>Chicago Boss:
<pre><code>Person = boss_record:new(person, [{name, "Joe"}, {age, 4}])</code></pre>
                            </p>

                            <h4>Saving a record</h4>

                            <p>Ruby on Rails:
<pre><code>@person.save</code></pre>
                            </p>

                            <p>Chicago Boss:
<pre><code>Person:save()</code></pre>
                            </p>

                            <h4>Perform a 302 Redirect</h4>
                            <p>Ruby on Rails:
<pre><code>redirect_to :action =&gt; 'show', :id =&gt; @person.id</code></pre>
                            </p>

                            <p>Chicago Boss:
<pre><code>{redirect, [{action, "show"}, {id, Person:id()}]}</code></pre>
                            </p>

                            <p>Check out the <a href="https://github.com/evanmiller/ChicagoBoss/wiki/Ruby-on-Rails-Versus-Chicago-Boss">wiki page</a> for more examples, including record validation, before filters, and more.</p>

                            <h3>Chicago Boss Is Ready For Action</h3>

                            <p>We're not quite to a 1.0 release, but Chicago Boss is already being used in production on a number of <a href="https://github.com/evanmiller/ChicagoBoss/wiki/List-of-companies-using-Chicago-Boss-internally">internal</a> as well as <a href="https://github.com/evanmiller/ChicagoBoss/wiki/List-of-public-websites-built-with-Chicago-Boss">public-facing</a> websites. If you like what you've read so far, you can download <a href="https://github.com/evanmiller/ChicagoBoss">the latest code</a>, browse the <a href="/api.html">API documents</a>, read the <a href="/tutorial.pdf">PDF tutorial</a>, check out our <a href="https://github.com/evanmiller/ChicagoBoss/wiki">wiki</a>, or come and <a href="contact.htm">talk to us</a>!</p>

						</div>
						
						<div class="sidebar five columns omega">
                            <h3>&#9742;&nbsp;&nbsp;Talk to us<span>&nbsp;</span></h3>
							<ul>
                                <li>#chicagoboss on irc.freenode.net</li>
                                <li><a href="https://groups.google.com/forum/?fromgroups#!forum/chicagoboss">chicagoboss</a>@googlegroups.com</li>
							</ul>
						</div>
						<div class="sidebar five columns omega">
							<h3><span>&#128077;</span>Ideal for</h3>
							<ul>
								<li>TCO-conscious developers</li>
								<li>Multi-core servers</li>
								<li>Resource-constrained environments (small VPS's, embedded, ARM&#133;)</li>
								<li>DevOps people tired of crashes</li>
								<li>Building deployable applications with few moving parts</li>
								<li>Internal (intranet) applications</li>
								<li>Interfacing with legacy databases</li>
								<li>Continuous deployment</li>
								<li>Building the Next Great Web Service</li>
							</ul>
						</div>
						
					</div>
				</div>
			</div>
			
		</section>
		<footer class="clearfix">
			<nav id="nav-footer" class="clearfix">
				<a href="http://www.chicagoboss.org/tutorial.pdf">PDF Tutorial</a><a href="https://github.com/evanmiller/ChicagoBoss">GitHub Project</a><a href="contact.htm">Contact Us</a> <!-- NOTE: Leave the carriage returns out, please. -->
			</nav>
		</footer>
	</article>
		
</body>
</html>
