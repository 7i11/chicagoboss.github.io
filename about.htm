<!DOCTYPE html>
<head>
	<meta charset="utf-8" />
	
	<!-- Mobile Specific Metas
  ================================================== -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	
	<title>Chicago Boss</title>
	<link rel="stylesheet" href="includes/css/main.css">
	
	<script src="includes/js/jquery-1.8.2.min.js"></script>
	<script src="includes/js/main.js"></script>

	<!-- IE Fix for HTML5 Tags -->
	<!--[if lt IE 9]>
		<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->

</head>
<body>
	<article>
		<header>
			<hgroup id="nav-global-container">
				<aside id="logo">
					<a href="index.htm">
						<svg id="logo-large" height="99" width="252" xmlns="http://google.com" xmlns:xlink="http://www.w3.org/1999/xlink" >
						  <image x="" y="" height="99" width="252"  xlink:href="images/logo.svg" />
						</svg>
						<svg id="logo-small" height="79" width="232" xmlns="http://google.com" xmlns:xlink="http://www.w3.org/1999/xlink" >
						  <image x="" y="" height="79" width="232"  xlink:href="images/logo.svg" />
						</svg>
					</a>
				</aside>
				<nav id="nav-global">
					<a href="https://github.com/evanmiller/ChicagoBoss/wiki/Quickstart">Quick Start</a><a href="https://github.com/evanmiller/ChicagoBoss/wiki">Wiki</a><a href="https://groups.google.com/forum/#!forum/chicagoboss">Community</a><a href="about.htm" class="active">About</a><a href="http://www.chicagoboss.org/ChicagoBoss-0.8.3.tar.gz" class="download">Download v 0.8.3 <span>&#128229;</span></a> 
				</nav>
			</hgroup>
		</header>
		<section class="container">
			
			<div class="sixteen columns">
				<div id="content-container" class="padding-twenty">
					<div class="row clearfix">
						<div class="ten columns alpha">
							<h2>About</h2>
							<h3>The Golden Age of Network Programming</h3>
							<p>Once upon a time, before the days when anyone who knew about the lasso tool in Photoshop decided to become a web programmer, servers were written by grizzled C and C++ engineers who ate rice and beans and knew how to stretch a CPU cycle to its utmost limit. They'd talk about things like "byte copies", "cache hits", and  "system calls", the little things that might matter only a few micro- or milliseconds, but taken together, could mean the difference between delight and despair somewhere on the other side of the Internet. The server's job was to deliver information as quickly as possible, and did so by the grace of the good Lord above and the ingenuity of the engineer down the hall.</p>

							<h3>Ruby on Rails: A False Prophet</h3>
							<p>But somewhere along the line, human nature kicked in, and programmers started to get greedy. Lisp had softened the ground, and Perl planted the seeds of Laziness, Impatience, and Hubris into programmers' minds. These seeds later grew into the great tree of temptation known as Ruby on Rails, which whispered promises into programmers' ears and told them they had been working so hard all these years &#8212; wasn't it time for a break? Can't you just let the server do a little more work instead? Don't you deserve to be happy?</p>
							<p>Rails, to be sure, was fun, and with it, practically anyone could write a web server that did something useful. The clouds opened, the birds sang, and the mundane became enjoyable. But the good times came with a price: Rails servers were slow, and they were buggy. No matter, preached the prophet: just buy more hardware. Server crashing? Restart it. Who cares if your users have to wait a few extra seconds? After all&#133; you're worth it.</p>

							<h3>Descent into Darkness</h3>
							<p>Most of the crashes in Ruby on Rails were eventually worked out, but this pernicious logic gave way to more and more programmer conveniences, which came at the expense of supposedly "cheap" CPU cycles. Enough cheap, of course, gets expensive. Each convenience added to ActiveRecord, and each helper tacked onto the template system, was financed in part by the operations team, which had to manage more and more servers and respond to more crashes; and in part by the users who had to wait longer and longer (and longerâ€¦) for each web page to load.</p>
							<p>It was only a matter of time before the costs became intolerable; users began to complain, and operations started pushing work back on the programmers. (DevOps.) But unwilling to abandon the convenience of Rails, programmers solved the slowness with a novel remedy: rather than discern and mitigate the cause of the slowness on the server, they could instead divert users' attention away from it by using extensive JavaScript animations in the browser.</p>

							<h3>A New Beginning</h3>
							<p>Chicago Boss is a reaction against slow server software. We believe that today's generation of "Loading&#133;" animations are gumming up the web and hindering users from achieving their goals quickly. Boss was designed with low&#8211;level engineering considerations in mind in order to deliver old-fashioned, information-rich web pages to users as efficiently as possible. Of course, if you'd prefer to stick to a single-page architecture or make extensive use of AJAX, Boss can also serve up JSON in a snap, too.</p>
							<p>The best part is that unlike in the days of yore, you no longer have to be a cycle-counting programming guru to write a high-performance web server. You don't have to implement complex view caching or write nested callbacks to get good performance. All of the hard parts are handled by the Erlang VM. The API of Chicago Boss was inspired by, and is as succinct as, Ruby on Rails. You only need to learn a subset of Erlang in order to achieve 99% of web programming tasks.</p>
							<p>Chicago Boss is almost fully functional at this point; the only key features missing are a database migration system and OTP-style release handling (but we're working on it!). As a word of warning, the project is not as mature as Ruby on Rails or Django; the documents can be spartan, and the error messages can be cryptic. The Erlang community is small in comparison to other languages, so if you need specialized functionality, you may end up having to write your own library. But if you're willing to forego a few creature comforts, you'll find that Chicago Boss is the easiest way to build a website in Erlang &#8212; the world's most advanced networking platform.</p>
						</div>
						
						<div class="sidebar five columns omega">
							<h3><span>&#128077;</span>Ideal for</h3>
							<ul>
								<li>TCO-conscious developers</li>
								<li>Multi-core servers</li>
								<li>Resource-constrained environments (small VPS's, embedded, ARM&#133;)</li>
								<li>DevOps people tired of crashes</li>
								<li>Building deployable applications with few moving parts</li>
								<li>Internal (intranet) applications</li>
								<li>Interfacing with legacy databases</li>
								<li>Continuous deployment</li>
								<li>Building the Next Great Web Service</li>
							</ul>
						</div>
						
					</div>
				</div>
			</div>
			
		</section>
		<footer class="clearfix">
			<nav id="nav-footer" class="clearfix">
				<span>&#169; Chicago Boss</span><a href="http://www.chicagoboss.org/api.html">API</a><a href="http://www.chicagoboss.org/tutorial.pdf">PDF Tutorial</a><a href="https://github.com/evanmiller/ChicagoBoss">GitHub Project</a><a href="contact.htm">Contact</a> <!-- NOTE: Leave the carriage returns out, please. -->
			</nav>
		</footer>
	</article>
		
</body>
</html>
